{"version":3,"file":"index.js","sources":["../src/expect/core.ts","../src/expect/matchers/js.ts","../src/expect/matchers/aftereffects.ts","../src/describe.ts","../src/expect/index.ts","../src/runner.ts"],"sourcesContent":["// lib/expect/core.ts\r\n\r\nexport class Expect<T> {\r\n    protected actual: T;\r\n\r\n    constructor(actual: T) {\r\n        this.actual = actual;\r\n    }\r\n\r\n    protected assert(condition: boolean, message: string): void {\r\n        if (!condition) {\r\n            throw new Error(message);\r\n        }\r\n    }\r\n}\r\n\r\nexport interface Matcher<T> {\r\n    [key: string]: (expected?: any, ...args: any[]) => void;\r\n}\r\n\r\nexport function createExpect<T>(\r\n    actual: T,\r\n    matchers: Matcher<T>[] = []\r\n): Expect<T> & Matcher<T> {\r\n    const expectInstance = new Expect(actual) as Expect<T> & Matcher<T>;\r\n\r\n    for (var i = 0; i < matchers.length; i++) {\r\n        var matcherGroup = matchers[i];\r\n        for (var key in matcherGroup) {\r\n            if (matcherGroup.hasOwnProperty(key)) {\r\n                expectInstance[key] = matcherGroup[key];\r\n            }\r\n        }\r\n    }\r\n\r\n    return expectInstance;\r\n}\r\n","// lib/expect/matchers/js.ts\r\nimport { Matcher } from '../core';\r\n\r\nexport const jsMatchers: Matcher<any> = {\r\n    toBe: function (expected: any) {\r\n        this.assert(\r\n            this.actual === expected,\r\n            'Expected ' + expected + ' but got ' + this.actual\r\n        );\r\n        return this;\r\n    },\r\n    toEqual: function (expected: object) {\r\n        var actualStr = JSON.stringify(this.actual);\r\n        var expectedStr = JSON.stringify(expected);\r\n        this.assert(\r\n            actualStr === expectedStr,\r\n            'Expected ' + expectedStr + ' but got ' + actualStr\r\n        );\r\n        return this;\r\n    },\r\n    toBeDefined: function () {\r\n        this.assert(\r\n            this.actual !== undefined,\r\n            'Expected value to be defined, but got undefined'\r\n        );\r\n        return this;\r\n    },\r\n    toBeUndefined: function () {\r\n        this.assert(\r\n            this.actual === undefined,\r\n            'Expected value to be undefined, but got ' + this.actual\r\n        );\r\n        return this;\r\n    },\r\n    toBeNull: function () {\r\n        this.assert(\r\n            this.actual === null,\r\n            'Expected value to be null, but got ' + this.actual\r\n        );\r\n        return this;\r\n    },\r\n    toBeTruthy: function () {\r\n        this.assert(\r\n            this.actual,\r\n            'Expected value to be truthy, but got ' + this.actual\r\n        );\r\n        return this;\r\n    },\r\n    toBeFalsy: function () {\r\n        this.assert(\r\n            !this.actual,\r\n            'Expected value to be falsy, but got ' + this.actual\r\n        );\r\n        return this;\r\n    },\r\n    toBeArray: function () {\r\n        this.assert(\r\n            this.actual instanceof Array,\r\n            'Expected ' + this.actual + ' to be an array'\r\n        );\r\n        return this;\r\n    },\r\n    toBeEmpty: function () {\r\n        this.assert(\r\n            this.actual.length === 0,\r\n            'Expected ' + this.actual + ' to be empty'\r\n        );\r\n        return this;\r\n    },\r\n    toHaveLength: function (expected: number) {\r\n        this.assert(\r\n            this.actual.length === expected,\r\n            'Expected ' + this.actual + ' to have length ' + expected\r\n        );\r\n        return this;\r\n    }\r\n};\r\n","// lib/expect/matchers/aftereffects.ts\r\nimport { Matcher } from '../core';\r\n\r\n// Asumimos que CompItem está definido en tus tipos de Adobe\r\nexport const afterEffectsMatchers: Matcher<CompItem> = {\r\n    toBeActiveComp: function () {\r\n        this.assert(\r\n            this.actual instanceof CompItem &&\r\n                app.project.activeItem === this.actual,\r\n            'Expected ' +\r\n                (this.actual instanceof CompItem\r\n                    ? this.actual.name\r\n                    : 'unknown') +\r\n                ' to be the active composition, but it is not'\r\n        );\r\n        return this;\r\n    },\r\n\r\n    toHaveDuration: function (expected: number) {\r\n        var actualDuration =\r\n            this.actual instanceof CompItem\r\n                ? this.actual.duration\r\n                : 'undefined';\r\n        this.assert(\r\n            this.actual instanceof CompItem &&\r\n                this.actual.duration === expected,\r\n            'Expected duration ' + expected + ' but got ' + actualDuration\r\n        );\r\n        return this;\r\n    },\r\n\r\n    toBeComp: function () {\r\n        this.assert(\r\n            this.actual && this.actual.toString() === '[object CompItem]',\r\n            'Expected ' + this.actual.toString() + ' to be a composition'\r\n        );\r\n        return this;\r\n    }\r\n};\r\n","// lib/describe.ts\r\nimport { Test, Suite, TestFn } from './types';\r\n\r\nconst suites: Suite[] = [];\r\nlet currentSuite: Suite | null = null;\r\n\r\nexport function describe(description: string, fn: () => void): void {\r\n    const tests: Test[] = [];\r\n    currentSuite = { description, tests };\r\n    suites.push(currentSuite);\r\n\r\n    // Ejecutar el contenido para recolectar pruebas\r\n    fn();\r\n    currentSuite = null; // Resetear después de recolectar\r\n}\r\n\r\nexport function it(name: string, fn: TestFn): void {\r\n    if (!currentSuite) {\r\n        throw new Error('it() must be called inside a describe()');\r\n    }\r\n    currentSuite.tests.push({ name, fn });\r\n}\r\n\r\nexport function getSuites(): Suite[] {\r\n    return suites;\r\n}\r\n","import { createExpect, Matcher, Expect } from './core';\r\nimport { jsMatchers } from './matchers/js';\r\nimport { afterEffectsMatchers } from './matchers/aftereffects';\r\nimport { describe, it, getSuites } from '../describe';\r\n\r\nexport function expect<T>(actual: T): Expect<T> & Matcher<T> {\r\n    return createExpect(actual, [jsMatchers]);\r\n}\r\n\r\nexport namespace AE {\r\n    export function expect<T>(actual: T): Expect<T> & Matcher<T> {\r\n        return createExpect(actual, [jsMatchers, afterEffectsMatchers]);\r\n    }\r\n}\r\n\r\nexport { describe, it, getSuites };\r\n","// lib/runner.ts\r\nimport { Suite } from './types';\r\nimport { getSuites } from './describe';\r\nexport class TestRunner {\r\n    private passedTests = 0;\r\n    private failedTests = 0;\r\n\r\n    run(suites: Suite[]): void {\r\n        for (const suite of suites) {\r\n            $.writeln(`Suite: ${suite.description}`);\r\n            for (const test of suite.tests) {\r\n                $.writeln(`  Test: ${test.name}`);\r\n                try {\r\n                    test.fn();\r\n                    this.passedTests++;\r\n                    $.writeln('    ✅ Passed');\r\n                } catch (e: any) {\r\n                    this.failedTests++;\r\n                    $.writeln(`    ❌ Failed: ${e.message}\r\n                        ${e.fileName}\r\n                        ${e.line}`);\r\n                }\r\n            }\r\n        }\r\n        this.showResults();\r\n    }\r\n\r\n    private showResults(): void {\r\n        $.writeln('\\nTest Results:');\r\n        $.writeln(`Passed: ${this.passedTests}`);\r\n        $.writeln(`Failed: ${this.failedTests}`);\r\n    }\r\n}\r\n\r\nexport function runTests(suites = getSuites()): void {\r\n    const runner = new TestRunner();\r\n    runner.run(suites);\r\n}\r\n"],"names":["expectInstance","toBe","toEqual","toBeDefined","toBeUndefined","toBeNull","toBeTruthy","toBeFalsy","toBeArray","toBeEmpty","toHaveLength","toBeActiveComp","toHaveDuration","toBeComp","currentSuite","description","tests","suites","fn","name","_defineProperty","_proto","$","_iterator2","_iterator","runner"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;AAKI;AAAC;;;AAIO;AACJ;;AACH;AAAA;AAOL;AAG0B;AACtB;AAEA;AACI;AACA;AACI;AACIA;AACJ;AACJ;AACJ;AAEA;AACJ;;ACpCA;;AAGA;AACIC;AACI;AAIA;;AAEJC;;AAEI;AACA;AAIA;;AAEJC;;AAKI;;AAEJC;AACI;AAIA;;AAEJC;AACI;AAIA;;AAEJC;AACI;AAIA;;AAEJC;AACI;AAIA;;AAEJC;AACI;AAIA;;AAEJC;AACI;AAIA;;AAEJC;;AAKI;AACJ;AACJ;;AC5EA;;AAGA;AACA;AACIC;AACI;AASA;;AAGJC;AACI;;AASA;;AAGJC;AACI;AAIA;AACJ;AACJ;;ACtCA;;AAGA;AACA;AAEA;;AAEIC;AAAiBC;AAAaC;;AAC9BC;;AAEA;AACAC;;AAEJ;AAEA;;AAEQ;AACJ;AACAJ;AAA0BK;AAAMD;AAAG;AACvC;AAEA;AACI;AACJ;;ACpBA;AACI;AACJ;AAAC;AAEkB;;;AAGf;;AAAC;;ACTL;AAAuB;AAAAE;AACIA;AACA;AAAA;AAAAC;AAEI;;AACG;;AAAE;;AACiB;;AACX;;AAAE;;;;;AAKxBC;;;;AAMJ;AACJ;AAAC;;AAAA;AAAAC;AAAA;AACL;AAAC;;AAAA;AAAAC;AAAA;;;AAEJH;AAGGC;;;;AAGH;AAAA;AAGL;AAAqD;AACjD;AACAG;AACJ;;;"}